/**
 * Generates project changelog using github-changelog-generator
 * https://github.com/github-changelog-generator/github-changelog-generator
 */
tasks.register("generateChangelog", Exec.class) {
    it.description('Generate a project changelog.')
    it.group('documentation')

    def commandArgs = [
            /*
             * username of the owner of target GitHub repo */
            '-u', 'yooksi',
            /*
             * name of project on GitHub */
            '-p', project.name,
            /*
             * only issues with the specified labels will be included in the changelog
             * this means that issues that are included HAVE to have at least one of these labels */
            '--include-labels', 'bug,enhancement,breaking,deprecated',
            /*
             * define all labels you want excluded from the changelog */
            '--exclude-labels', 'dev,wontfix,workflow,question,documentation',
    ]
    def token = project.ext.has('githubToken') ? project.ext.githubToken : null
    if (token != null) {
        commandArgs += [ '--token', token ]
    }
    else logger.warn('Github token not supplied, task might fail')

    def command = [ 'bundle', 'exec', 'github_changelog_generator' ] + commandArgs
    it.commandLine = (project.ext.osName == "Windows") ? [ 'cmd', '/c' ] + command : command
}

distributions.main.contents {
    it.from ('README.md', 'LICENSE.txt', 'CHANGELOG.md')
    it.exclude {
        File file = it.file
        String filename = file.getName()
        /*
         * there is a bug that occurs when running distribution tasks on Github CI
         * where the distribution archive tries to add itself to archive
         * @see https://github.com/yooksi/pz-zdoc/issues/21
         */
        if (filename.startsWith(archivesBaseName) && filename.endsWithAny('.zip', '.tar')) {
            return true
        }
        if (!CI) {
            // exclude Project Zomboid classes
            if (file.toPath().startsWith(zomboidClassesDir.toPath())) {
                return true
            }
            // exclude Project Zomboid libraries
            if (file.toPath().startsWith(gameDir)) {
                return true
            }
        }
        return false
    }
}
// generate changelog BEFORE creating distribution
[ 'assemble', 'assembleDist', 'installDist' ].forEach({
    tasks.named(it).configure({it.dependsOn('generateChangelog')})
})
// run distribution archive tasks AFTER generating changelog
[ 'distTar', 'distZip' ].forEach({
    tasks.named(it).configure({it.mustRunAfter('generateChangelog')})
})
def cleanScripts = tasks.register('cleanScripts', Delete.class) {
    it.description('Delete build scripts directory.')
    it.group('zomboid')
    it.delete("$buildDir/scripts")
}
tasks.named('installDist').configure{
    it.dependsOn(cleanScripts)
}

tasks.named('startScripts').configure {
    it.setWindowsStartScriptGenerator(new ZWindowsStartScriptGenerator())
    it.setUnixStartScriptGenerator(new ZUnixStartScriptGenerator())

    // do not add provided files to classpath, they are not included in distribution
    it.classpath -= configurations.zomboidImplementation
}